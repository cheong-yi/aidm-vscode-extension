{
  "metadata": {
    "created": "2025-01-09",
    "totalPrompts": 48,
    "templateVersion": "1.0"
  },
  "prompts": {
    "REF-001": {
      "taskId": "REF-001",
      "title": "Remove DEMO_MODE flag and conditional code from extension.ts",
      "promptContent": "# Atomic Task Implementation: REF-001 - Remove DEMO_MODE flag and conditional code from extension.ts\n\n## Single-Concern Focus\nThis task removes the DEMO_MODE constant and all conditional blocks that check it from extension.ts.\n\n## Context Files (Maximum 2)\n- Target file: src/extension.ts (lines 30-35, 914-920, 1130-1135)\n- No secondary file needed\n\n## Task Scope\n- ID: REF-001\n- Single Responsibility: Remove DEMO_MODE flag and its conditional code blocks\n- Input: extension.ts with DEMO_MODE checks\n- Output: extension.ts without any DEMO_MODE references\n- Duration: 15 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Removing dead code controlled by DEMO_MODE flag\n\n## Prerequisites Verified\n- [ ] extension.ts exists and compiles\n- [ ] Extension activates successfully\n- [ ] No critical functionality depends on DEMO_MODE\n\n## Implementation Specification\n\n### Changes Required\n1. Delete line 31: `const DEMO_MODE = true;`\n2. Remove conditional at line 914-920 - execute the code unconditionally\n3. Remove conditional at line 1130-1135 - execute the code unconditionally\n4. Remove any other DEMO_MODE references found\n\n### Validation Test\n```typescript\n// Verify no DEMO_MODE references remain\ngrep -n \"DEMO_MODE\" src/extension.ts\n// Should return no results\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] DEMO_MODE constant deleted\n- [ ] All DEMO_MODE conditionals removed\n- [ ] Extension compiles without errors\n- [ ] Extension activates successfully\n\n## Implementation Constraints\n- Error Handling: Preserve all error handling in formerly conditional code\n- Dependencies: None\n- Side Effects: Previously disabled features now always enabled\n- Performance: No performance impact expected\n\n## Validation\nAfter implementation, verify:\n1. npm run compile-tsc succeeds\n2. grep \"DEMO_MODE\" returns no results\n3. Extension activates in VSCode\n\n## Integration Point\nThis task connects to:\n- Caller: VSCode extension host\n- Called: All extension commands now unconditionally registered\n- Event: Extension activation\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/extension.ts\n- Delete: DEMO_MODE constant declaration\n- Modify: Remove conditional wrappers, keep inner code\n- Purpose: Eliminate demo-specific branching\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-002: Remove debugPathConstruction function from extension.ts\n\n## Commit Message\n```\ncleanup(extension): remove DEMO_MODE flag and conditionals - REF-001\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: None expected\n- Location: N/A\n- Impact: N/A\n- Root Cause: N/A\n- Suggested Fix: N/A\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-002": {
      "taskId": "REF-002", 
      "title": "Remove debugPathConstruction function from extension.ts",
      "promptContent": "# Atomic Task Implementation: REF-002 - Remove debugPathConstruction function from extension.ts\n\n## Single-Concern Focus\nThis task removes the debugPathConstruction debug function and its invocation from extension.ts.\n\n## Context Files (Maximum 2)\n- Target file: src/extension.ts (lines 37-50, line 456)\n- No secondary file needed\n\n## Task Scope\n- ID: REF-002\n- Single Responsibility: Remove debugPathConstruction function and its call\n- Input: extension.ts with debug function\n- Output: extension.ts without debug function\n- Duration: 15 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Removing debug/development code from production\n\n## Prerequisites Verified\n- [ ] REF-001 completed (DEMO_MODE removed)\n- [ ] extension.ts compiles\n- [ ] Extension activates successfully\n\n## Implementation Specification\n\n### Changes Required\n1. Delete function debugPathConstruction() at lines 37-50\n2. Delete the function call at line 456: `debugPathConstruction();`\n3. Verify no other references to debugPathConstruction exist\n\n### Validation Test\n```typescript\n// Verify debugPathConstruction is removed\ngrep -n \"debugPathConstruction\" src/extension.ts\n// Should return no results\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] debugPathConstruction function deleted\n- [ ] Function invocation removed\n- [ ] Extension compiles without errors\n- [ ] No console debug output on activation\n\n## Implementation Constraints\n- Error Handling: N/A - removing debug code only\n- Dependencies: None\n- Side Effects: No more debug console output\n- Performance: Slight improvement from removed logging\n\n## Validation\nAfter implementation, verify:\n1. npm run compile-tsc succeeds\n2. grep \"debugPathConstruction\" returns no results\n3. Extension activates without debug output\n\n## Integration Point\nThis task connects to:\n- Caller: Extension activation function\n- Called: None (function being removed)\n- Event: Extension activation\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/extension.ts\n- Delete: debugPathConstruction function definition\n- Delete: debugPathConstruction() call in activate\n- Purpose: Remove development debug code\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-003: Extract data fetching logic from TaskWebviewProvider\n\n## Commit Message\n```\ncleanup(extension): remove debugPathConstruction debug function - REF-002\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: None expected\n- Location: N/A\n- Impact: N/A\n- Root Cause: N/A\n- Suggested Fix: N/A\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-003": {
      "taskId": "REF-003",
      "title": "Extract data fetching logic from TaskWebviewProvider",
      "promptContent": "# Atomic Task Implementation: REF-003 - Extract data fetching logic from TaskWebviewProvider\n\n## Single-Concern Focus\nThis task moves all data fetching methods from TaskWebviewProvider to TasksDataService.\n\n## Context Files (Maximum 2)\n- Target file: src/tasks/providers/TaskWebviewProvider.ts (data fetching methods)\n- Service file: src/services/TasksDataService.ts (will receive the methods)\n\n## Task Scope\n- ID: REF-003\n- Single Responsibility: Move getTasks(), getTaskById(), and related data methods to service\n- Input: Data fetching logic in webview provider\n- Output: Data fetching centralized in TasksDataService\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Moving data access to appropriate service layer\n\n## Prerequisites Verified\n- [ ] TaskWebviewProvider.ts exists and compiles\n- [ ] TasksDataService.ts exists\n- [ ] Tasks display correctly in webview\n\n## Implementation Specification\n\n### Methods to Move\n```typescript\n// From TaskWebviewProvider to TasksDataService:\nprivate async fetchTasks(): Promise<Task[]>\nprivate getTaskById(id: string): Task | undefined\nprivate filterTasks(filter: string): Task[]\nprivate searchTasks(query: string): Task[]\n```\n\n### Service Integration\n```typescript\n// TaskWebviewProvider will use:\nthis.tasksDataService.getTasks()\nthis.tasksDataService.getTaskById(id)\nthis.tasksDataService.filterTasks(filter)\nthis.tasksDataService.searchTasks(query)\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] Data methods moved to TasksDataService\n- [ ] TaskWebviewProvider uses service for all data\n- [ ] Tasks still display correctly\n- [ ] No direct file access in TaskWebviewProvider\n\n## Implementation Constraints\n- Error Handling: Preserve existing error handling\n- Dependencies: Use existing TasksDataService reference\n- Side Effects: None - refactoring only\n- Performance: No change expected\n\n## Validation\nAfter implementation, verify:\n1. npm test -- TasksDataService passes\n2. Tasks webview displays data correctly\n3. No data fetching logic remains in TaskWebviewProvider\n\n## Integration Point\nThis task connects to:\n- Caller: TaskWebviewProvider message handlers\n- Called: TasksDataService data methods\n- Event: Task data requests from webview\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/services/TasksDataService.ts\n- Add: Data fetching methods from TaskWebviewProvider\n- Purpose: Centralize data access\n\n### Secondary File: src/tasks/providers/TaskWebviewProvider.ts\n- Remove: Data fetching methods\n- Modify: Use TasksDataService for data\n- Purpose: Delegate data access to service\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-004: Consolidate to JSON-only task parser\n\n## Commit Message\n```\nrefactor(tasks): extract data fetching to TasksDataService - REF-003\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Possible circular dependency\n- Location: TasksDataService imports\n- Impact: MEDIUM\n- Root Cause: Service might import provider types\n- Suggested Fix: Use interface instead of concrete type\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-004": {
      "taskId": "REF-004",
      "title": "Consolidate to JSON-only task parser",
      "promptContent": "# Atomic Task Implementation: REF-004 - Consolidate to JSON-only task parser\n\n## Single-Concern Focus\nThis task removes MarkdownTaskParser and consolidates all parsing to use only JSONTaskParser.\n\n## Context Files (Maximum 2)\n- Target file: src/services/MarkdownTaskParser.ts (to be deleted)\n- Update file: src/services/TasksDataService.ts (remove markdown references)\n\n## Task Scope\n- ID: REF-004\n- Single Responsibility: Remove markdown parsing, use JSON only\n- Input: Two parser implementations\n- Output: Single JSON parser implementation\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Consolidating duplicate parsing logic\n\n## Prerequisites Verified\n- [ ] JSONTaskParser.ts works correctly\n- [ ] TasksDataService.ts compiles\n- [ ] Tasks load from JSON files\n\n## Implementation Specification\n\n### Changes Required\n```typescript\n// In TasksDataService.ts, remove:\nimport { MarkdownTaskParser } from './MarkdownTaskParser';\nprivate markdownParser: MarkdownTaskParser;\n\n// Remove any conditional logic like:\nif (filepath.endsWith('.md')) {\n  return this.markdownParser.parse(content);\n}\n\n// Keep only:\nreturn this.jsonParser.parse(content);\n```\n\n### File Deletion\n```bash\nrm src/services/MarkdownTaskParser.ts\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] MarkdownTaskParser.ts deleted\n- [ ] No markdown parsing references remain\n- [ ] JSON parsing works for all task files\n- [ ] TypeScript compiles without errors\n\n## Implementation Constraints\n- Error Handling: Update error messages to mention JSON only\n- Dependencies: Remove markdown parsing dependencies\n- Side Effects: .md task files will no longer work\n- Performance: Faster parsing (JSON only)\n\n## Validation\nAfter implementation, verify:\n1. npm run compile-tsc succeeds\n2. grep -r \"MarkdownTaskParser\" src/ returns nothing\n3. Tasks load from tasks.json correctly\n\n## Integration Point\nThis task connects to:\n- Caller: TasksDataService.loadTasks()\n- Called: JSONTaskParser.parse()\n- Event: Task file loading\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/services/TasksDataService.ts\n- Remove: MarkdownTaskParser import and usage\n- Modify: Use only JSONTaskParser\n- Purpose: Single parsing strategy\n\n### Secondary File: src/services/MarkdownTaskParser.ts\n- Delete: Entire file\n- Purpose: Remove unused parser\n\n### Test File: src/__tests__/services/MarkdownTaskParser.test.ts\n- Delete: Test file if exists\n- Purpose: Remove obsolete tests\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-005: Extract HTML generation from TaskWebviewProvider to separate class\n\n## Commit Message\n```\nfix(parser): consolidate to JSON-only parser - remove complexity - REF-004\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Some test files may use .md format\n- Location: src/__tests__/fixtures/\n- Impact: LOW\n- Root Cause: Test data in markdown format\n- Suggested Fix: Convert test fixtures to JSON\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-005": {
      "taskId": "REF-005",
      "title": "Extract HTML generation from TaskWebviewProvider to separate class",
      "promptContent": "# Atomic Task Implementation: REF-005 - Extract HTML generation from TaskWebviewProvider to separate class\n\n## Single-Concern Focus\nThis task creates a new TaskHTMLGenerator class and moves all HTML generation logic from TaskWebviewProvider.\n\n## Context Files (Maximum 2)\n- Source file: src/tasks/providers/TaskWebviewProvider.ts (HTML generation methods)\n- New file: src/tasks/providers/TaskHTMLGenerator.ts (to be created)\n\n## Task Scope\n- ID: REF-005\n- Single Responsibility: Extract HTML generation to dedicated class\n- Input: HTML generation methods in provider\n- Output: Separate TaskHTMLGenerator class\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Extracting HTML generation responsibility\n\n## Prerequisites Verified\n- [ ] REF-003 completed (data logic extracted)\n- [ ] TaskWebviewProvider.ts compiles\n- [ ] HTML rendering works correctly\n\n## Implementation Specification\n\n### New Class Structure\n```typescript\nexport class TaskHTMLGenerator {\n  constructor(private extensionUri: vscode.Uri) {}\n  \n  generateFullHTML(tasks: Task[], expandedId: string | null): string {\n    // Move getWebviewContent() logic here\n  }\n  \n  private generateTaskCard(task: Task): string {\n    // Move task card HTML generation\n  }\n  \n  private generateStyles(): string {\n    // Move CSS generation\n  }\n  \n  private generateScripts(): string {\n    // Move JavaScript generation\n  }\n}\n```\n\n### Provider Integration\n```typescript\n// In TaskWebviewProvider:\nprivate htmlGenerator: TaskHTMLGenerator;\n\n// In constructor:\nthis.htmlGenerator = new TaskHTMLGenerator(this.extensionUri);\n\n// Replace HTML generation with:\nconst html = this.htmlGenerator.generateFullHTML(tasks, this.expandedId);\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] TaskHTMLGenerator class created\n- [ ] HTML generation moved to new class\n- [ ] TaskWebviewProvider delegates to generator\n- [ ] Webview renders correctly\n\n## Implementation Constraints\n- Error Handling: Preserve existing error handling\n- Dependencies: Pass vscode.Uri for resource paths\n- Side Effects: None - refactoring only\n- Performance: No change expected\n\n## Validation\nAfter implementation, verify:\n1. npm run compile-tsc succeeds\n2. Webview displays tasks correctly\n3. CSS and JavaScript still work\n\n## Integration Point\nThis task connects to:\n- Caller: TaskWebviewProvider.resolveWebviewView()\n- Called: TaskHTMLGenerator.generateFullHTML()\n- Event: Webview content updates\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/tasks/providers/TaskHTMLGenerator.ts\n- Add: New class with HTML generation methods\n- Purpose: Single responsibility for HTML\n\n### Secondary File: src/tasks/providers/TaskWebviewProvider.ts\n- Remove: HTML generation methods\n- Add: TaskHTMLGenerator usage\n- Purpose: Delegate HTML generation\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-006: Remove demo models directory\n\n## Commit Message\n```\nrefactor(webview): extract HTML generation to TaskHTMLGenerator - REF-005\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Large inline CSS and JS strings\n- Location: HTML generation methods\n- Impact: MEDIUM\n- Root Cause: All styles/scripts inline\n- Suggested Fix: Extract to separate files (REF-016, REF-040)\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-008": {
      "taskId": "REF-008",
      "title": "Extract message handling from TaskWebviewProvider",
      "promptContent": "# Atomic Task Implementation: REF-008 - Extract message handling from TaskWebviewProvider\n\n## Single-Concern Focus\nThis task creates a new TaskMessageHandler class and moves all webview message handling logic from TaskWebviewProvider.\n\n## Context Files (Maximum 2)\n- Source file: src/tasks/providers/TaskWebviewProvider.ts (message handling logic)\n- New file: src/tasks/providers/TaskMessageHandler.ts (to be created)\n\n## Task Scope\n- ID: REF-008\n- Single Responsibility: Extract message handling to dedicated class\n- Input: Message handling in provider\n- Output: Separate TaskMessageHandler class\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Extracting message handling responsibility\n\n## Prerequisites Verified\n- [ ] REF-005 completed (HTML generation extracted)\n- [ ] TaskWebviewProvider handles messages\n- [ ] Message communication works\n\n## Implementation Specification\n\n### New Class Structure\n```typescript\nexport class TaskMessageHandler {\n  constructor(\n    private tasksDataService: TasksDataService,\n    private view: vscode.WebviewView\n  ) {}\n  \n  async handleMessage(message: any): Promise<void> {\n    switch (message.command) {\n      case 'refreshTasks':\n        await this.handleRefresh();\n        break;\n      case 'updateStatus':\n        await this.handleStatusUpdate(message.taskId, message.status);\n        break;\n      case 'filterTasks':\n        await this.handleFilter(message.filter);\n        break;\n      // ... other cases\n    }\n  }\n  \n  private async handleRefresh(): Promise<void> {\n    // Implementation\n  }\n  \n  private async handleStatusUpdate(taskId: string, status: string): Promise<void> {\n    // Implementation\n  }\n}\n```\n\n### Provider Integration\n```typescript\n// In TaskWebviewProvider:\nprivate messageHandler: TaskMessageHandler;\n\n// In resolveWebviewView:\nthis.messageHandler = new TaskMessageHandler(this.tasksDataService, view);\n\n// Replace message handling with:\nview.webview.onDidReceiveMessage(\n  message => this.messageHandler.handleMessage(message)\n);\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] TaskMessageHandler class created\n- [ ] Message handling moved to new class\n- [ ] All message commands work\n- [ ] No message logic in provider\n\n## Implementation Constraints\n- Error Handling: Preserve error responses\n- Dependencies: Pass required services\n- Side Effects: Message responses to webview\n- Performance: No change expected\n\n## Validation\nAfter implementation, verify:\n1. npm run compile-tsc succeeds\n2. All webview interactions work\n3. Status updates persist correctly\n\n## Integration Point\nThis task connects to:\n- Caller: Webview message events\n- Called: TasksDataService methods\n- Event: onDidReceiveMessage\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/tasks/providers/TaskMessageHandler.ts\n- Add: New class with message handling\n- Purpose: Single responsibility for messages\n\n### Secondary File: src/tasks/providers/TaskWebviewProvider.ts\n- Remove: Message handling logic\n- Add: TaskMessageHandler delegation\n- Purpose: Simplify provider\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-009: Remove health check logic from ProcessManager\n\n## Commit Message\n```\nrefactor(webview): extract message handling to TaskMessageHandler - REF-008\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Complex message validation\n- Location: Message handling switch\n- Impact: LOW\n- Root Cause: No message type validation\n- Suggested Fix: Add message interface types\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-009": {
      "taskId": "REF-009",
      "title": "Remove health check logic from ProcessManager",
      "promptContent": "# Atomic Task Implementation: REF-009 - Remove health check logic from ProcessManager\n\n## Single-Concern Focus\nThis task removes the health check interval and related monitoring code from ProcessManager.\n\n## Context Files (Maximum 2)\n- Target file: src/server/ProcessManager.ts (lines with healthCheckInterval)\n- No secondary file needed\n\n## Task Scope\n- ID: REF-009\n- Single Responsibility: Remove health check monitoring logic\n- Input: ProcessManager with health checks\n- Output: ProcessManager without health monitoring\n- Duration: 15 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Removing unnecessary complexity\n\n## Prerequisites Verified\n- [ ] ProcessManager.ts compiles\n- [ ] Server starts successfully\n- [ ] No critical dependency on health checks\n\n## Implementation Specification\n\n### Code to Remove\n```typescript\n// Remove these lines:\nprivate healthCheckInterval: NodeJS.Timeout | null = null;\n\n// In stop() method, remove:\nif (this.healthCheckInterval) {\n  clearInterval(this.healthCheckInterval);\n  this.healthCheckInterval = null;\n}\n\n// Remove any startHealthCheck() method\n// Remove any checkHealth() method\n// Remove health check scheduling in start()\n```\n\n### Simplified Flow\n```typescript\n// After removal, start() should just:\nasync start(): Promise<void> {\n  // Start server directly\n  await this.server.start();\n  this.isRunning = true;\n}\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] healthCheckInterval removed\n- [ ] No health check methods remain\n- [ ] Server starts without monitoring\n- [ ] TypeScript compiles\n\n## Implementation Constraints\n- Error Handling: Keep error handling for start/stop\n- Dependencies: None\n- Side Effects: No automatic recovery\n- Performance: Reduced overhead\n\n## Validation\nAfter implementation, verify:\n1. npm run compile-tsc succeeds\n2. grep \"healthCheck\" ProcessManager.ts returns nothing\n3. Server starts and stops correctly\n\n## Integration Point\nThis task connects to:\n- Caller: Extension activation\n- Called: SimpleMCPServer.start()\n- Event: Server lifecycle\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/server/ProcessManager.ts\n- Remove: healthCheckInterval property\n- Remove: Health check methods\n- Remove: Interval management in stop()\n- Purpose: Simplify process management\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-010: Remove restart/retry logic from ProcessManager\n\n## Commit Message\n```\nrefactor(process): remove health check logic from ProcessManager - REF-009\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Server might fail silently\n- Location: ProcessManager.start()\n- Impact: LOW\n- Root Cause: No monitoring after start\n- Suggested Fix: Add simple isRunning check\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-010": {
      "taskId": "REF-010",
      "title": "Remove restart/retry logic from ProcessManager",
      "promptContent": "# Atomic Task Implementation: REF-010 - Remove restart/retry logic from ProcessManager\n\n## Single-Concern Focus\nThis task removes restartCount, restartTimer, and exponential backoff logic from ProcessManager.\n\n## Context Files (Maximum 2)\n- Target file: src/server/ProcessManager.ts (restart-related code)\n- No secondary file needed\n\n## Task Scope\n- ID: REF-010\n- Single Responsibility: Remove automatic restart and retry logic\n- Input: ProcessManager with restart logic\n- Output: ProcessManager with simple start/stop only\n- Duration: 15 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Removing complex retry logic\n\n## Prerequisites Verified\n- [ ] REF-009 completed (health checks removed)\n- [ ] ProcessManager.ts compiles\n- [ ] Server lifecycle works\n\n## Implementation Specification\n\n### Code to Remove\n```typescript\n// Remove these properties:\nprivate restartCount: number = 0;\nprivate restartTimer: NodeJS.Timeout | null = null;\n\n// Remove restart() method entirely\nasync restart(): Promise<void> { /* delete */ }\n\n// In stop(), remove:\nif (this.restartTimer) {\n  clearTimeout(this.restartTimer);\n  this.restartTimer = null;\n}\n\n// Remove from config:\nretryAttempts: number;\nretryDelay: number;\n\n// Remove any exponential backoff calculation\n```\n\n### Simplified Structure\n```typescript\nclass ProcessManager {\n  async start(): Promise<void> {\n    await this.server.start();\n  }\n  \n  async stop(): Promise<void> {\n    await this.server.stop();\n  }\n  \n  getStatus(): ProcessStatus {\n    return this.isRunning ? 'running' : 'stopped';\n  }\n}\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] restartCount removed\n- [ ] restartTimer removed\n- [ ] restart() method deleted\n- [ ] No retry logic remains\n\n## Implementation Constraints\n- Error Handling: Simple try/catch only\n- Dependencies: None\n- Side Effects: No automatic recovery\n- Performance: Faster shutdown\n\n## Validation\nAfter implementation, verify:\n1. npm run compile-tsc succeeds\n2. grep \"restart\" ProcessManager.ts returns minimal results\n3. Server starts and stops cleanly\n\n## Integration Point\nThis task connects to:\n- Caller: Extension commands\n- Called: SimpleMCPServer methods\n- Event: Manual start/stop only\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/server/ProcessManager.ts\n- Remove: Restart properties and methods\n- Remove: Timer management\n- Remove: Retry configuration\n- Purpose: Simplify to basic control\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-011: Simplify ProcessManager to direct server control\n\n## Commit Message\n```\nrefactor(process): remove restart/retry logic from ProcessManager - REF-010\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: No recovery from crashes\n- Location: ProcessManager lifecycle\n- Impact: MEDIUM\n- Root Cause: Removed auto-restart\n- Suggested Fix: Manual restart command\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-011": {
      "taskId": "REF-011",
      "title": "Simplify ProcessManager to direct server control",
      "promptContent": "# Atomic Task Implementation: REF-011 - Simplify ProcessManager to direct server control\n\n## Single-Concern Focus\nThis task reduces ProcessManager to simple start/stop/getStatus methods under 100 lines total.\n\n## Context Files (Maximum 2)\n- Target file: src/server/ProcessManager.ts (entire file)\n- Reference: src/server/SimpleMCPServer.ts (for interface)\n\n## Task Scope\n- ID: REF-011\n- Single Responsibility: Simplify ProcessManager to basic server control\n- Input: Complex ProcessManager with 477 lines\n- Output: Simple ProcessManager under 100 lines\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Major simplification of process management\n\n## Prerequisites Verified\n- [ ] REF-010 completed (restart logic removed)\n- [ ] SimpleMCPServer has start/stop methods\n- [ ] No complex lifecycle needed\n\n## Implementation Specification\n\n### Target Implementation\n```typescript\nexport class ProcessManager {\n  private server: SimpleMCPServer;\n  private isRunning: boolean = false;\n  \n  constructor(private config: { port: number }) {\n    this.server = new SimpleMCPServer(config.port);\n  }\n  \n  async start(): Promise<void> {\n    if (this.isRunning) {\n      throw new Error('Server already running');\n    }\n    \n    try {\n      await this.server.start();\n      this.isRunning = true;\n      console.log(`MCP server started on port ${this.config.port}`);\n    } catch (error) {\n      console.error('Failed to start server:', error);\n      throw error;\n    }\n  }\n  \n  async stop(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }\n    \n    try {\n      await this.server.stop();\n      this.isRunning = false;\n      console.log('MCP server stopped');\n    } catch (error) {\n      console.error('Failed to stop server:', error);\n      throw error;\n    }\n  }\n  \n  getStatus(): 'running' | 'stopped' {\n    return this.isRunning ? 'running' : 'stopped';\n  }\n  \n  getPort(): number {\n    return this.config.port;\n  }\n}\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] File under 100 lines total\n- [ ] Only start/stop/getStatus/getPort methods\n- [ ] Direct server control only\n- [ ] TypeScript compiles\n\n## Implementation Constraints\n- Error Handling: Simple try/catch with console\n- Dependencies: SimpleMCPServer only\n- Side Effects: Console logging\n- Performance: Minimal overhead\n\n## Validation\nAfter implementation, verify:\n1. wc -l ProcessManager.ts shows < 100 lines\n2. npm run compile-tsc succeeds\n3. Server starts on configured port\n\n## Integration Point\nThis task connects to:\n- Caller: Extension activation\n- Called: SimpleMCPServer\n- Event: Direct method calls only\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/server/ProcessManager.ts\n- Rewrite: Entire file to simple implementation\n- Purpose: Minimal process management\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-012: Extract state management from TaskWebviewProvider\n\n## Commit Message\n```\nrefactor(process): simplify ProcessManager to direct server control - REF-011\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Lost process monitoring\n- Location: ProcessManager\n- Impact: LOW\n- Root Cause: Removed all monitoring\n- Suggested Fix: Extension status bar indicator\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-012": {
      "taskId": "REF-012",
      "title": "Extract state management from TaskWebviewProvider",
      "promptContent": "# Atomic Task Implementation: REF-012 - Extract state management from TaskWebviewProvider\n\n## Single-Concern Focus\nThis task creates a new TaskViewState class to manage webview state including expanded tasks and filters.\n\n## Context Files (Maximum 2)\n- Source file: src/tasks/providers/TaskWebviewProvider.ts (state properties)\n- New file: src/tasks/providers/TaskViewState.ts (to be created)\n\n## Task Scope\n- ID: REF-012\n- Single Responsibility: Extract state management to dedicated class\n- Input: State scattered in provider\n- Output: Centralized TaskViewState class\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Extracting state management responsibility\n\n## Prerequisites Verified\n- [ ] REF-008 completed (message handling extracted)\n- [ ] Accordion behavior works\n- [ ] State persistence works\n\n## Implementation Specification\n\n### New Class Structure\n```typescript\nexport class TaskViewState {\n  private expandedTaskId: string | null = null;\n  private currentFilter: string = 'all';\n  private searchQuery: string = '';\n  \n  constructor(private context: vscode.ExtensionContext) {\n    this.loadState();\n  }\n  \n  setExpandedTask(taskId: string | null): void {\n    this.expandedTaskId = taskId;\n    this.saveState();\n  }\n  \n  getExpandedTask(): string | null {\n    return this.expandedTaskId;\n  }\n  \n  setFilter(filter: string): void {\n    this.currentFilter = filter;\n    this.saveState();\n  }\n  \n  getFilter(): string {\n    return this.currentFilter;\n  }\n  \n  private loadState(): void {\n    const state = this.context.workspaceState.get('taskViewState', {});\n    this.expandedTaskId = state.expandedTaskId || null;\n    this.currentFilter = state.filter || 'all';\n  }\n  \n  private saveState(): void {\n    this.context.workspaceState.update('taskViewState', {\n      expandedTaskId: this.expandedTaskId,\n      filter: this.currentFilter,\n      searchQuery: this.searchQuery\n    });\n  }\n}\n```\n\n### Provider Integration\n```typescript\n// In TaskWebviewProvider:\nprivate viewState: TaskViewState;\n\n// In constructor:\nthis.viewState = new TaskViewState(this.context);\n\n// Replace state access:\nthis.viewState.getExpandedTask()\nthis.viewState.setExpandedTask(taskId)\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] TaskViewState class created\n- [ ] State management extracted\n- [ ] Accordion state persists\n- [ ] Filter state persists\n\n## Implementation Constraints\n- Error Handling: Handle missing state gracefully\n- Dependencies: VSCode ExtensionContext\n- Side Effects: Workspace state updates\n- Performance: Minimal state operations\n\n## Validation\nAfter implementation, verify:\n1. npm run compile-tsc succeeds\n2. Expanded task persists on reload\n3. Filter selection persists\n\n## Integration Point\nThis task connects to:\n- Caller: TaskWebviewProvider\n- Called: VSCode workspace state API\n- Event: State changes\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/tasks/providers/TaskViewState.ts\n- Add: New state management class\n- Purpose: Centralized state handling\n\n### Secondary File: src/tasks/providers/TaskWebviewProvider.ts\n- Remove: State properties\n- Add: TaskViewState usage\n- Purpose: Delegate state management\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-013: Remove DegradedModeManager completely\n\n## Commit Message\n```\nrefactor(webview): extract state management to TaskViewState - REF-012\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Complex state synchronization\n- Location: State persistence logic\n- Impact: LOW\n- Root Cause: Multiple state sources\n- Suggested Fix: Single state object\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-013": {
      "taskId": "REF-013",
      "title": "Remove DegradedModeManager completely",
      "promptContent": "# Atomic Task Implementation: REF-013 - Remove DegradedModeManager completely\n\n## Single-Concern Focus\nThis task removes the entire DegradedModeManager and all references to it from the codebase.\n\n## Context Files (Maximum 2)\n- Target file: src/utils/DegradedModeManager.ts (921 lines to delete)\n- Update file: src/extension.ts (remove imports and usage)\n\n## Task Scope\n- ID: REF-013\n- Single Responsibility: Delete DegradedModeManager and its usage\n- Input: Complex degraded mode system\n- Output: No degraded mode handling\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Removing overengineered resilience\n\n## Prerequisites Verified\n- [ ] Extension works without degraded mode\n- [ ] No critical dependency on DegradedModeManager\n- [ ] Basic error handling exists\n\n## Implementation Specification\n\n### Files to Delete\n```bash\nrm src/utils/DegradedModeManager.ts\nrm src/__tests__/unit/DegradedModeManager.test.ts\nrm src/__tests__/utils/DegradedModeManager.test.ts\n```\n\n### Code to Remove from extension.ts\n```typescript\n// Remove import:\nimport { DegradedModeManager } from './utils/DegradedModeManager';\n\n// Remove initialization:\nconst degradedModeManager = new DegradedModeManager();\n\n// Remove all calls like:\ndegradedModeManager.enterDegradedMode();\ndegradedModeManager.checkStatus();\ndegradedModeManager.recover();\n\n// Simplify error handling to:\ncatch (error) {\n  console.error('Error:', error);\n  // Continue without degraded mode\n}\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] DegradedModeManager.ts deleted\n- [ ] No degraded mode imports\n- [ ] No degraded mode references\n- [ ] Extension still works\n\n## Implementation Constraints\n- Error Handling: Use simple try/catch\n- Dependencies: None\n- Side Effects: No fallback mode\n- Performance: Reduced overhead\n\n## Validation\nAfter implementation, verify:\n1. npm run compile-tsc succeeds\n2. grep -r \"DegradedMode\" src/ returns nothing\n3. Extension activates normally\n\n## Integration Point\nThis task connects to:\n- Caller: Extension error handlers\n- Called: None (feature removed)\n- Event: Error conditions\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/utils/DegradedModeManager.ts\n- Delete: Entire file (921 lines)\n- Purpose: Remove complexity\n\n### Secondary File: src/extension.ts\n- Remove: DegradedModeManager import\n- Remove: All degraded mode calls\n- Purpose: Simplify error handling\n\n### Test Files: src/__tests__/**/DegradedModeManager*.ts\n- Delete: All related test files\n- Purpose: Remove obsolete tests\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-014: Remove AuditLogger functionality\n\n## Commit Message\n```\nrefactor(utils): remove DegradedModeManager completely - REF-013\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: No fallback on errors\n- Location: Error handling paths\n- Impact: LOW\n- Root Cause: Removed degraded mode\n- Suggested Fix: Simple error recovery\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-017": {
      "taskId": "REF-017",
      "title": "Fix git diff URI construction issue",
      "promptContent": "# Atomic Task Implementation: REF-017 - Fix git diff URI construction issue\n\n## Single-Concern Focus\nThis task fixes the URI construction for git diff functionality to properly handle file paths.\n\n## Context Files (Maximum 2)\n- Target file: src/tasks/providers/TaskWebviewProvider.ts (git diff command)\n- Command handler: src/extension.ts (aidm.openDiff command)\n\n## Task Scope\n- ID: REF-017\n- Single Responsibility: Fix URI construction for git diff command\n- Input: File path from task\n- Output: Properly constructed VSCode URI for diff\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Green\n- Green: Implementing fix for broken functionality\n\n## Prerequisites Verified\n- [ ] REF-008 completed (message handling extracted)\n- [ ] Git diff command exists\n- [ ] VSCode diff API available\n\n## Implementation Specification\n\n### Current Problem\n```typescript\n// Broken: URI construction fails\nconst uri = vscode.Uri.parse(filePath);\n// Should be:\nconst uri = vscode.Uri.file(path.resolve(workspaceRoot, filePath));\n```\n\n### Fix Implementation\n```typescript\n// In message handler for 'openDiff':\ncase 'openDiff': {\n  const { file } = message;\n  const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n  \n  if (!workspaceFolder) {\n    vscode.window.showErrorMessage('No workspace folder open');\n    return;\n  }\n  \n  const absolutePath = path.isAbsolute(file) \n    ? file \n    : path.join(workspaceFolder.uri.fsPath, file);\n  \n  const fileUri = vscode.Uri.file(absolutePath);\n  \n  // Execute diff command\n  vscode.commands.executeCommand(\n    'aidm.openDiff',\n    fileUri.toString()\n  );\n  break;\n}\n```\n\n### Command Handler Fix\n```typescript\n// In extension.ts openDiff command:\nconst fileUri = vscode.Uri.parse(uriString);\nconst gitUri = vscode.Uri.parse(`git:${fileUri.fsPath}`);\n\nvscode.commands.executeCommand(\n  'vscode.diff',\n  gitUri,\n  fileUri,\n  `${path.basename(fileUri.fsPath)} (Git Diff)`\n);\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] File paths resolve correctly\n- [ ] Git diff opens in VSCode\n- [ ] Both absolute and relative paths work\n- [ ] No URI parsing errors\n\n## Implementation Constraints\n- Error Handling: Check workspace exists\n- Dependencies: path module, vscode.Uri\n- Side Effects: Opens diff view\n- Performance: Immediate response\n\n## Validation\nAfter implementation, verify:\n1. Click on task file link\n2. Git diff view opens\n3. Shows changes for correct file\n\n## Integration Point\nThis task connects to:\n- Caller: Webview file click handler\n- Called: vscode.diff command\n- Event: File link click\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/tasks/providers/TaskMessageHandler.ts\n- Fix: URI construction for file paths\n- Purpose: Proper path resolution\n\n### Secondary File: src/extension.ts\n- Fix: Git URI construction in openDiff command\n- Purpose: Correct git:// protocol URI\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-018: Remove TimeFormattingUtility\n\n## Commit Message\n```\nfix(diff): correct URI construction for git diff - REF-017\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Git extension dependency\n- Location: Git URI construction\n- Impact: MEDIUM\n- Root Cause: Assumes git extension\n- Suggested Fix: Check git extension exists\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-023": {
      "taskId": "REF-023",
      "title": "Create thin TaskWebviewProvider facade",
      "promptContent": "# Atomic Task Implementation: REF-023 - Create thin TaskWebviewProvider facade\n\n## Single-Concern Focus\nThis task reduces TaskWebviewProvider to a thin coordinator under 300 lines by delegating to specialized classes.\n\n## Context Files (Maximum 2)\n- Target file: src/tasks/providers/TaskWebviewProvider.ts (2833 lines currently)\n- Reference: Already extracted classes (HTMLGenerator, MessageHandler, ViewState, EventManager)\n\n## Task Scope\n- ID: REF-023\n- Single Responsibility: Reduce provider to thin facade pattern\n- Input: Bloated 2833-line provider\n- Output: Thin provider under 300 lines\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Final consolidation to facade pattern\n\n## Prerequisites Verified\n- [ ] REF-012 completed (state extracted)\n- [ ] REF-016 completed (CSS extracted)\n- [ ] All specialized classes exist\n\n## Implementation Specification\n\n### Target Structure\n```typescript\nexport class TaskWebviewProvider implements vscode.WebviewViewProvider {\n  private view?: vscode.WebviewView;\n  private readonly disposables: vscode.Disposable[] = [];\n  \n  // Delegate objects\n  private readonly htmlGenerator: TaskHTMLGenerator;\n  private readonly messageHandler: TaskMessageHandler;\n  private readonly viewState: TaskViewState;\n  private readonly eventManager: TaskEventManager;\n  \n  constructor(\n    private readonly tasksDataService: TasksDataService,\n    private readonly context: vscode.ExtensionContext\n  ) {\n    // Initialize delegates\n    this.htmlGenerator = new TaskHTMLGenerator(context.extensionUri);\n    this.viewState = new TaskViewState(context);\n    this.eventManager = new TaskEventManager();\n  }\n  \n  public resolveWebviewView(\n    webviewView: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext,\n    _token: vscode.CancellationToken\n  ): void {\n    this.view = webviewView;\n    \n    // Configure webview\n    webviewView.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [this.context.extensionUri]\n    };\n    \n    // Initialize message handler with view\n    this.messageHandler = new TaskMessageHandler(\n      this.tasksDataService,\n      webviewView,\n      this.viewState\n    );\n    \n    // Setup event handling\n    this.setupEventHandlers();\n    \n    // Initial render\n    this.updateWebview();\n  }\n  \n  private setupEventHandlers(): void {\n    // Delegate to EventManager\n    this.eventManager.setupHandlers(\n      this.view!,\n      this.messageHandler,\n      () => this.updateWebview()\n    );\n    \n    // Store disposables\n    this.disposables.push(...this.eventManager.getDisposables());\n  }\n  \n  private async updateWebview(): Promise<void> {\n    if (!this.view) return;\n    \n    // Get data\n    const tasks = await this.tasksDataService.getTasks();\n    const expandedId = this.viewState.getExpandedTask();\n    \n    // Generate HTML\n    const html = this.htmlGenerator.generateFullHTML(tasks, expandedId);\n    \n    // Update view\n    this.view.webview.html = html;\n  }\n  \n  public dispose(): void {\n    // Clean up all disposables\n    while (this.disposables.length) {\n      const disposable = this.disposables.pop();\n      if (disposable) {\n        disposable.dispose();\n      }\n    }\n  }\n}\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] File under 300 lines total\n- [ ] Only coordination logic remains\n- [ ] All functionality preserved\n- [ ] Clean delegation pattern\n\n## Implementation Constraints\n- Error Handling: Delegate to specialists\n- Dependencies: Only delegate classes\n- Side Effects: None - pure coordination\n- Performance: Improved separation\n\n## Validation\nAfter implementation, verify:\n1. wc -l TaskWebviewProvider.ts shows < 300\n2. All webview features work\n3. No business logic in provider\n\n## Integration Point\nThis task connects to:\n- Caller: VSCode extension\n- Called: All delegate classes\n- Event: WebviewView lifecycle\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/tasks/providers/TaskWebviewProvider.ts\n- Rewrite: Reduce to facade pattern\n- Purpose: Thin coordination layer\n\n## Next Task Preview\nAfter completing this task, the next atomic task will be:\nREF-024: Remove mock data generation features\n\n## Commit Message\n```\nrefactor(webview): create thin TaskWebviewProvider facade - REF-023\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Delegate initialization order\n- Location: Constructor\n- Impact: LOW\n- Root Cause: Some delegates need view\n- Suggested Fix: Lazy initialization\n\nDO NOT FIX - Log only for follow-up tasks."
    },
    "REF-048": {
      "taskId": "REF-048",
      "title": "Final TaskWebviewProvider reduction",
      "promptContent": "# Atomic Task Implementation: REF-048 - Final TaskWebviewProvider reduction\n\n## Single-Concern Focus\nThis task verifies and ensures TaskWebviewProvider is under 300 lines total after all refactoring.\n\n## Context Files (Maximum 2)\n- Target file: src/tasks/providers/TaskWebviewProvider.ts\n- Reference: All extracted delegate classes\n\n## Task Scope\n- ID: REF-048\n- Single Responsibility: Final verification and cleanup of provider size\n- Input: Partially refactored provider\n- Output: Provider definitively under 300 lines\n- Duration: 20 minutes maximum\n\n## TDD Cycle Position\nCurrent Cycle: Refactor\n- Refactor: Final size verification and cleanup\n\n## Prerequisites Verified\n- [ ] REF-042 completed (controller extracted)\n- [ ] All delegate classes working\n- [ ] Core functionality preserved\n\n## Implementation Specification\n\n### Final Checklist\n```typescript\n// Provider should ONLY have:\n// 1. Constructor (< 20 lines)\n// 2. resolveWebviewView (< 30 lines)\n// 3. dispose (< 10 lines)\n// 4. 2-3 small private helpers (< 20 lines each)\n// 5. Property declarations (< 20 lines)\n\n// Total: ~150-200 lines maximum\n```\n\n### Remove Any Remaining\n- Inline HTML strings\n- Inline CSS strings\n- Inline JavaScript\n- Complex logic\n- Data manipulation\n- Direct file access\n- Message handling details\n- State management details\n\n### Measure Success\n```bash\n# Must show < 300 lines\nwc -l src/tasks/providers/TaskWebviewProvider.ts\n\n# Verify no large methods\ngrep -n \"^[[:space:]]*private\\|public\" TaskWebviewProvider.ts\n```\n\n## Success Criteria (Binary Pass/Fail)\n- [ ] File is under 300 lines total\n- [ ] No method over 30 lines\n- [ ] Only coordination logic\n- [ ] Line count: 2833 → <300 (89% reduction)\n\n## Implementation Constraints\n- Error Handling: Minimal, delegate to services\n- Dependencies: Only injected services\n- Side Effects: None\n- Performance: Faster due to separation\n\n## Validation\nAfter implementation, verify:\n1. wc -l shows < 300 lines\n2. All features still work\n3. Clean separation of concerns\n\n## Integration Point\nThis task connects to:\n- Caller: VSCode extension\n- Called: Delegate classes only\n- Event: View lifecycle only\n\n## File Changes (Maximum 3 Files)\n\n### Primary File: src/tasks/providers/TaskWebviewProvider.ts\n- Final cleanup: Remove any remaining bloat\n- Purpose: Achieve target size\n\n## Next Task Preview\nThis is the final task for TaskWebviewProvider reduction.\nNext phase: MCP architecture preparation\n\n## Commit Message\n```\nrefactor(webview): final reduction to <300 lines - REF-048\n```\n\n---\n\n## Issue Discovery Protocol\n### DISCOVERED ISSUES LOG\n- Issue: Size target achieved\n- Location: TaskWebviewProvider.ts\n- Impact: POSITIVE\n- Root Cause: Successful refactoring\n- Result: 2833 → <300 lines (89% reduction)\n\nCELEBRATE - Major milestone achieved."
    }
  }
}